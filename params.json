{"name":"Akka-typed-eventsourcing","tagline":"An implementation of Eventsourcing with Akka-typed, Spray, Slick & Postgres.","body":"# Akka-typed-eventsourcing\r\n----\r\n\r\nAn implementation of Eventsourcing with Akka-typed, Spray, Slick & Postgres.\r\n\r\n## Summary\r\n----\r\n\r\n1. A simple Spray REST API to submit commands to Akka-typed's ActorSystem.\r\n2. Implements \"Actor per request\" pattern using typed actors.\r\n3. Provides base implementations for AggregateManager and Aggregate.\r\n4. Uses Akka-typed's Total behavior's lifecycle event 'PreStart' to replay all stored events which restores Actor's state.\r\n5. Maps stored JSON events to relevant Case classes.\r\n6. Uses Slick-pg extension.\r\n7. Uses Gson for JSON parsing.\r\n\r\n## Running \r\n---\r\n\r\n1. Add your postgres database configuration in application.conf\r\n2. Run Schema.scala's main method to create the database schema\r\n3. Run Boot.scala to start application.\r\n\r\n## EVENTS table\r\n\r\nPERSISTENT_ID  |   EVENT_JSON  | EVENT_NAME | TAGS | CREATE_TIME\r\n-------------- | ------------- | ---------- | ---- | -----------\r\nString         |    String     |   String   | List[String] | Timestamp\r\n\r\n\r\n## APIs\r\n---\r\n\r\n#### Command: CreateUser\r\n##### Event - UserCreated\r\n\r\nhttp://localhost:8080/createUser?username=John&name=Smith&password=123\r\n\r\n    {\r\n        \"username\": \"John\",\r\n        \"name\": \"Smith\",\r\n        \"password\": \"123\",\r\n        \"deleted\": false\r\n    }\r\n\r\nRunning the same URL again returns error message\r\n    \r\n    {\r\n        \"message\": \"Username 'John' with name 'Smith' already exists.\"\r\n    }\r\n\r\n#### Command: UpdateName\r\n##### Event - UserNameUpdated\r\n\r\nhttp://localhost:8080/updateName?username=John&name=Jhonny\r\n\r\n    {\r\n        \"username\": \"John\",\r\n        \"name\": \"Jhonny\",\r\n        \"password\": \"123\",\r\n        \"deleted\": false\r\n    }\r\n    \r\nRunning the same URL again returns error message\r\n\r\n    {\r\n        \"message\": \"Name unchanged!\",\r\n        \"state\": {\r\n            \"username\": \"John\",\r\n            \"name\": \"Jhonny\",\r\n            \"password\": \"123\",\r\n            \"deleted\": false\r\n        }\r\n    }\r\n    \r\n#### Command: ChangePassword\r\n##### Event - UserPasswordChanged\r\n\r\nhttp://localhost:8080/changePassword?username=John&password=PA$$W0RD\r\n\r\n    {\r\n        \"username\": \"John\",\r\n        \"name\": \"Jhonny\",\r\n        \"password\": \"PA$$W0RD\",\r\n        \"deleted\": false\r\n    }\r\n\r\n#### Command: DeleteUser\r\n##### Event - UserDeleted\r\n\r\nhttp://localhost:8080/deleteUser?username=John\r\n\r\n    {\r\n        \"username\": \"John\",\r\n        \"name\": \"Jhonny\",\r\n        \"password\": \"PA$$W0RD\",\r\n        \"deleted\": true\r\n    }\r\n\r\nCalling CreateUser on a delete users display this message: http://localhost:8080/createUser?username=John&name=Smith&password=123\r\n\r\n    {\r\n        \"message\": \"Not a valid request: 'Initialize' for current state: 'deleted'\",\r\n        \"state\": {\r\n            \"username\": \"John\",\r\n            \"name\": \"Jhonny\",\r\n            \"password\": \"PA$$W0RD\",\r\n            \"deleted\": true\r\n        }\r\n    }\r\n    \r\n### TODOs\r\n- Test cases\r\n- Stopping Actors after reaching certain threshold of in-memory Actors.\r\n- Snapshotting\r\n- Read/Query side implementation with https://github.com/MfgLabs/akka-stream-extensions\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}